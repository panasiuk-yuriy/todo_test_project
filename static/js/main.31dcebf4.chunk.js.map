{"version":3,"sources":["store/query.js","store/tasks.js","store/index.js","components/PopUp/PopUpWindow.jsx","components/Task/Task.jsx","components/TasksList/TasksList.jsx","components/AddTaskSection/AddTaskSection.jsx","components/SearchField/SearchField.jsx","App.js","serviceWorker.js","index.js"],"names":["reducer","query","action","type","text","toLowerCase","tasksList","map","task","id","done","filter","getTasksList","state","getVisibleTasks","createSelector","todos","name","includes","rootReducer","combineReducers","tasksReducer","queryReducer","persistedState","localStorage","getItem","JSON","parse","store","createStore","composeWithDevTools","subscribe","setItem","stringify","getState","Popup","closePopup","confirmAction","className","onClick","Task","props","dispatch","useDispatch","useState","activeDelete","setActiveDelete","role","changeStatus","cn","deleteTask","TasksList","useSelector","key","AddTaskSection","setName","onSubmit","event","preventDefault","Date","now","handleSubmit","value","onChange","target","trimLeft","handleSetName","placeholder","disabled","length","SearchField","dispatchWithDebounce","useCallback","debounce","onKeyUp","handleSetQuery","App","tasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.31dcebf4.chunk.js","sourcesContent":["const CHANGE_QUERY = 'CHANGE_QUERY';\n\nexport const setQuery = (text) => ({ type: CHANGE_QUERY, text });\n\nconst reducer = (query = '', action) => {\n  switch (action.type) {\n    case CHANGE_QUERY:\n      return action.text.toLowerCase();\n    default:\n\n    return query;\n  }\n};\n\nexport default reducer;\n","const CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS';\nconst DELETE_TASK = 'DELETE_TASK';\nconst ADD_TASK = 'ADD_TASKS';\n\nexport const addTask = (task) => ({ type: ADD_TASK, task });\nexport const deleteTask = (id) => ({ type: DELETE_TASK, id });\nexport const changeStatus = (id, done) => ({ type: CHANGE_TASK_STATUS, id, done});\n\nconst reducer = (tasksList = [], action) => {\n  switch (action.type) {\n    case CHANGE_TASK_STATUS:\n      return tasksList.map(task => {\n        if (task.id === action.id) {\n          return {...task, done: !action.done}\n        }\n        return task;\n      })\n    case DELETE_TASK:\n      return tasksList.filter(task =>task.id !== action.id)\n    case ADD_TASK:\n      return [...tasksList, action.task]\n    default:\n      return tasksList;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createSelector } from 'reselect';\nimport queryReducer from './query';\nimport tasksReducer from './tasks';\n\nexport const getTasksList = (state) => state.tasksList;\nexport const getQuery = (state) => state.query;\n\nexport const getVisibleTasks = createSelector(\n  getTasksList,\n  getQuery,\n\n  (todos, query) => {\n    return todos.filter(task => (task.name)\n      .toLowerCase()\n      .includes(query.toLowerCase()));\n  },\n);\n\nconst rootReducer = combineReducers(\n  {\n    tasksList: tasksReducer,\n    query: queryReducer,\n  },\n);\n\nconst persistedState = localStorage.getItem('reduxState')\n  ? JSON.parse(localStorage.getItem('reduxState') || '')\n  : {};\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  composeWithDevTools(),\n);\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()));\n});\n\n\nexport default store;\n","import React from 'react';\nimport './Popup.scss';\n\nexport const Popup = ({ closePopup, confirmAction, text, name }) => {\n  return (\n    <div className='popup'>\n      <div className='popup__inner'>\n        <h1 className='popup__message'>{`${text} \"${name}\"`}</h1>\n        <div className=\"popup__buttons\">\n          <button\n            className='popup__confirm-btn btn'\n            onClick={() => confirmAction()}\n            type=\"button\">\n            OK\n        </button>\n          <button\n            className='popup__cancel-btn btn'\n            onClick={() => closePopup()}\n          >\n            Cancel\n        </button>\n        </div>\n      </div>\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteTask , changeStatus } from '../../store/tasks';\nimport cn from 'classnames';\nimport { Popup } from '../PopUp/PopUpWindow';\n\nimport './Task.scss';\n\nexport const Task = (props) => {\n  const { name, done, id} = props;\n\n  const dispatch = useDispatch();\n  const [activeDelete, setActiveDelete]= useState(false);\n  \n  const handleDelete = (taskId) => {\n    dispatch(deleteTask(taskId))\n    setActiveDelete(false)\n  };\n\n  return (\n    <li>\n      <div className=\"task\"\n      role=\"presentation\"\n      onClick={()=> dispatch(changeStatus(id, done))}>\n      <label className={cn(\"task__name\", {'task__done': done})}>\n        {name}\n      </label >\n      {done &&\n        <button className=\"task__delete-btn btn\" type='button' \n          onClick={() => setActiveDelete(true)}>delete</button>}\n      </div>\n      {activeDelete &&\n          <Popup\n            name={name}\n            text='Do you realy want delete?'\n            closePopup={() => setActiveDelete(false)}\n            confirmAction={() => handleDelete(id)}\n          />\n        }\n    </li>\n  )\n}","import React from 'react';\nimport { useSelector } from 'react-redux'\nimport { getVisibleTasks } from '../../store/index';\nimport { Task } from '../Task/Task';\n\nexport const TasksList = () => {\nconst todos = useSelector(getVisibleTasks);\n\n  return (\n    <>\n    <ul className=\"task-list\">\n      {todos.map(task => (\n        <Task key={task.id} {...task}/>\n      ))}\n    </ul>\n    </>\n  )\n}","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from '../../store/tasks';\nimport './AddTaskSection.scss';\n\nexport const AddTaskSection = () => {\n\n  const [name, setName] = useState('');\n  const dispatch = useDispatch();\n\n  const handleSetName = (event) => {\n    setName(event.target.value.trimLeft())\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    dispatch(addTask({ name, id: Date.now(), done: false }))\n    setName('');\n  };\n\n  return (\n    <div className=\"top\">\n      <form onSubmit={(event) => handleSubmit(event)}>\n        <div className=\"top__form\">\n          <input\n            className='top__input-add'\n            type=\"text\" value={name}\n            onChange={(event) => handleSetName(event)\n            }\n            placeholder=\"Enter task and press 'Add Task' button\"\n          />\n          <button\n            disabled={name.length < 1}\n            className=\"top__add-btn btn\"\n            type='submit'>\n            Add Task\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}","import React, { useCallback } from 'react';\nimport { debounce } from 'lodash';\nimport { useDispatch } from 'react-redux';\nimport { setQuery } from '../../store/query';\nimport './SearchField.scss';\n\nexport const SearchField = () => {\n  const dispatch = useDispatch();\n\n  const dispatchWithDebounce = useCallback(debounce(dispatch, 500), []);\n\n  const handleSetQuery = (event) => {\n    dispatchWithDebounce(setQuery(event.target.value));\n  };\n\n  return (\n    <input className='search'\n      type=\"text\"\n      placeholder=\"Enter task name for search\"\n      onKeyUp={(event) => handleSetQuery(event)}\n    />\n  );\n};\n\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { TasksList } from './components/TasksList/TasksList';\nimport { AddTaskSection } from './components/AddTaskSection/AddTaskSection';\nimport { SearchField } from './components/SearchField/SearchField';\nimport { getTasksList } from './store/index';\nimport './App.scss';\n\nfunction App() {\n  const tasks = useSelector(getTasksList);\n  \n  return (\n  <>\n  <div className='container'>\n    <h1 className=\"title\">Tasks App</h1>\n    {tasks.length >= 2 && <SearchField />}\n    <div className=\"task-container\">\n      <AddTaskSection />\n      <section className=\"main\">\n        <TasksList />\n      </section>\n    </div>\n  </div>\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}