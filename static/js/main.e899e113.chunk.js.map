{"version":3,"sources":["store/query.js","store/tasks.js","store/index.js","components/PopUp/PopUpWindow.jsx","components/Task/Task.jsx","components/TasksList/TasksList.jsx","components/AddTaskSection/AddTaskSection.jsx","components/SearchField/SearchField.jsx","App.js","serviceWorker.js","index.js"],"names":["reducer","query","action","type","text","toLowerCase","tasksList","map","task","id","done","filter","name","getTasksList","state","getVisibleTasks","createSelector","todos","includes","rootReducer","combineReducers","tasksReducer","queryReducer","persistedState","localStorage","getItem","JSON","parse","store","createStore","composeWithDevTools","subscribe","setItem","stringify","getState","Popup","closePopup","confirmAction","className","onClick","defaultProps","Task","dispatch","useDispatch","useState","activeDelete","setActiveDelete","isEdit","setIsEdit","newName","setNewName","handleEditTask","target","taskId","e","keyCode","editTask","onChange","value","trimLeft","replace","handleChange","onBlur","onKeyDown","autoFocus","changeStatus","onDoubleClick","cn","role","open","deleteTask","TasksList","useSelector","key","AddTaskSection","setName","onSubmit","event","preventDefault","Date","now","handleSubmit","handleSetName","placeholder","disabled","length","SearchField","dispatchWithDebounce","useCallback","debounce","onKeyUp","handleSetQuery","App","tasks","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e899e113.chunk.js","sourcesContent":["const CHANGE_QUERY = 'CHANGE_QUERY';\n\nexport const setQuery = (text) => ({ type: CHANGE_QUERY, text });\n\nconst reducer = (query = '', action) => {\n  switch (action.type) {\n    case CHANGE_QUERY:\n      return action.text.toLowerCase();\n    default:\n\n    return query;\n  }\n};\n\nexport default reducer;\n","const CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS';\nconst DELETE_TASK = 'DELETE_TASK';\nconst ADD_TASK = 'ADD_TASKS';\nconst EDIT_TASK = 'EDIT_TASK';\n\nexport const addTask = (task) => ({ type: ADD_TASK, task });\nexport const deleteTask = (id) => ({ type: DELETE_TASK, id });\nexport const changeStatus = (id, done) => ({ type: CHANGE_TASK_STATUS, id, done});\nexport const editTask = (id, name) => ({ type: EDIT_TASK, id, name});\n\nconst reducer = (tasksList = [], action) => {\n  switch (action.type) {\n    case CHANGE_TASK_STATUS:\n      return tasksList.map(task => {\n        if (task.id === action.id) {\n          return {...task, done: !action.done}\n        }\n        return task;\n      })\n    \n    case DELETE_TASK:\n      return tasksList.filter(task =>task.id !== action.id)\n    \n    case ADD_TASK:\n      return [...tasksList, action.task]\n    \n    case EDIT_TASK:\n      return tasksList.map((task) => {\n        if (task.id === action.id) {\n          return {\n            ...task, name: action.name,\n          };\n        }\n        return task;\n      });\n\n    default:\n      return tasksList;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createSelector } from 'reselect';\nimport queryReducer from './query';\nimport tasksReducer from './tasks';\n\nexport const getTasksList = (state) => state.tasksList;\nexport const getQuery = (state) => state.query;\n\nexport const getVisibleTasks = createSelector(\n  getTasksList,\n  getQuery,\n\n  (todos, query) => {\n    return todos.filter(task => (task.name)\n      .toLowerCase()\n      .includes(query.toLowerCase()));\n  },\n);\n\nconst rootReducer = combineReducers(\n  {\n    tasksList: tasksReducer,\n    query: queryReducer,\n  },\n);\n\nconst persistedState = localStorage.getItem('reduxState')\n  ? JSON.parse(localStorage.getItem('reduxState') || '')\n  : {};\n\nconst store = createStore(\n  rootReducer,\n  persistedState,\n  composeWithDevTools(),\n);\n\nstore.subscribe(() => {\n  localStorage.setItem('reduxState', JSON.stringify(store.getState()));\n});\n\n\nexport default store;\n","import React from 'react';\nimport './Popup.scss';\nimport PropTypes from 'prop-types';\n\nexport const Popup = ({ closePopup, confirmAction, text, name }) => {\n\n  return (\n    <div className='popup'>\n      <div className='popup__inner'>\n        <h1 className='popup__message'>{`${text} \"${name}\" ?`}</h1>\n        <div className=\"popup__buttons\">\n          <button\n            className='popup__confirm-btn btn'\n            onClick={() => confirmAction()}\n            type=\"button\">\n            OK\n        </button>\n          <button\n            className='popup__cancel-btn btn'\n            onClick={() => closePopup()}\n          >\n            Cancel\n        </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nPopup.propTypes = {\n  closePopup: PropTypes.func.isRequired,\n  confirmAction: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n  name: PropTypes.string\n};\n\nPopup.defaultProps = {\n  name: '',\n};","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteTask, changeStatus, editTask } from '../../store/tasks';\nimport cn from 'classnames';\nimport { Popup } from '../PopUp/PopUpWindow';\nimport PropTypes from 'prop-types';\nimport './Task.scss';\n\nexport const Task = ({ name, done, id }) => {\n\n  const dispatch = useDispatch();\n  const [activeDelete, setActiveDelete] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n  const [newName, setNewName] = useState('');\n\n  const handleDeleteTask = (taskId) => {\n    dispatch(deleteTask(taskId))\n    setActiveDelete(false)\n  };\n\n  const activateEditing = () => {\n    setIsEdit(true);\n    setNewName(name)\n  };\n\n  const handleChange = ({ target }) => {\n    setNewName(target.value.trimLeft().replace(/(\\s{2,})/, ' '))\n  };\n\n  const escapeEditing = (e) => {\n    if (e.keyCode === 13 || e.keyCode === 27) {\n      setIsEdit(false);\n    }\n  };\n\n  const handleEditTask = (target, taskId, newName) => {\n    if (target.keyCode === 13) {\n      dispatch(editTask(taskId, newName))\n    };\n\n    if (newName === '' && target.keyCode === 27) {\n      setIsEdit(false);\n    }\n\n    if (newName === '') {\n      return;\n    }\n\n    escapeEditing(target);\n  };\n\n  return (\n    <li>\n      <div className=\"task\">\n        {isEdit ?\n          (<input\n            onChange={(e) => handleChange(e)}\n            className=\"task__editing top__input-add\"\n            value={newName}\n            onBlur={() => setIsEdit(false)}\n            onKeyDown={e => handleEditTask(e, id, newName)}\n            autoFocus\n          />\n          ) :\n          (<>\n            <p\n              onClick={() => dispatch(changeStatus(id, done))}\n              onDoubleClick={() => activateEditing()}\n              className={cn(\"task__name\", { 'task__done': done })}\n              role=\"presentation\"\n            >\n              {name}\n            </p>\n            {done &&\n              <button className=\"task__delete-btn btn\" type='button'\n                onClick={() => setActiveDelete(true)}>delete</button>}\n          </>)\n        }\n      </div>\n      {activeDelete &&\n        <Popup\n          open={activeDelete}\n          name={name}\n          text='Do you really want delete'\n          closePopup={() => setActiveDelete(false)}\n          confirmAction={() => handleDeleteTask(id)}\n        />\n      }\n    </li>\n  )\n}\n\nTask.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  done: PropTypes.bool.isRequired,\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux'\nimport { getVisibleTasks } from '../../store/index';\nimport { Task } from '../Task/Task';\n\nexport const TasksList = () => {\nconst todos = useSelector(getVisibleTasks);\n\n  return (\n    <>\n    <ul className=\"task-list\">\n      {todos.map(task => (\n        <Task key={task.id} {...task}/>\n      ))}\n    </ul>\n    </>\n  )\n}","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from '../../store/tasks';\nimport './AddTaskSection.scss';\n\nexport const AddTaskSection = () => {\n\n  const [name, setName] = useState('');\n  const dispatch = useDispatch();\n\n  const handleSetName = (event) => {\n    setName(event.target.value.trimLeft().replace(/(\\s{2,})/, ' '))\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    dispatch(addTask({ name, id: Date.now(), done: false }))\n    setName('');\n  };\n\n  return (\n    <div className=\"top\">\n      <form onSubmit={(event) => handleSubmit(event)}>\n        <div className=\"top__form\">\n          <input\n            className='top__input-add'\n            type=\"text\" value={name}\n            onChange={(event) => handleSetName(event)\n            }\n            placeholder=\"Enter task and press 'Add Task' button\"\n          />\n          <button\n            disabled={name.length < 1}\n            className=\"top__add-btn btn\"\n            type='submit'>\n            Add Task\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}","import React, { useCallback } from 'react';\nimport { debounce } from 'lodash';\nimport { useDispatch } from 'react-redux';\nimport { setQuery } from '../../store/query';\nimport './SearchField.scss';\n\nexport const SearchField = () => {\n  const dispatch = useDispatch();\n\n  const dispatchWithDebounce = useCallback(debounce(dispatch, 500), []);\n\n  const handleSetQuery = (event) => {\n    dispatchWithDebounce(setQuery(event.target.value));\n  };\n\n  return (\n    <input className='search'\n      type=\"text\"\n      placeholder=\"Enter task name for search\"\n      onKeyUp={(event) => handleSetQuery(event)}\n    />\n  );\n};\n\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { TasksList } from './components/TasksList/TasksList';\nimport { AddTaskSection } from './components/AddTaskSection/AddTaskSection';\nimport { SearchField } from './components/SearchField/SearchField';\nimport { getTasksList } from './store/index';\nimport './App.scss';\n\nfunction App() {\n  const tasks = useSelector(getTasksList);\n  \n  return (\n  <>\n  <div className='container'>\n    <h1 className=\"title\">Tasks App</h1>\n    {tasks.length >= 2 && <SearchField />}\n    <div className=\"task-container\">\n      <AddTaskSection />\n      <section className=\"main\">\n        <TasksList />\n      </section>\n    </div>\n  </div>\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}